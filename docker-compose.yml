services:
  api:
    build: ./api
    ports:
      - "${API_PORT}:8080"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - MQTT_BROKER_URL=${MQTT_BROKER_URL}
      - FACE_RECOGNITION_URL=${FACE_RECOGNITION_URL}
      - DEBUG=${DEBUG}
    depends_on:
      - db
      - mosquitto
      - face_recognition
    networks:
      - app-network
      - mqtt-network

  face_recognition:
    build: 
      context: ./face_recognition
      dockerfile: service/Dockerfile
    ports:
      - "5001:5001"
    volumes:
      - ./face_recognition/core/models:/app/models
    environment:
      - MODEL_PATH=/app/models/ghostfacenets.h5
    networks:
      - app-network

  db:
    image: ankane/pgvector:latest
    container_name: cses_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database/migrations:/docker-entrypoint-initdb.d/migrations
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  mosquitto:
    image: eclipse-mosquitto:latest
    container_name: mosquitto
    ports:
      - "${MQTT_BROKER_PORT}:1883"
    volumes:
      - ./mqtt_broker/config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ./mqtt_broker/data:/mosquitto/data
      - ./mqtt_broker/log:/mosquitto/log
    networks:
      - mqtt-network
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge
  mqtt-network:
    driver: bridge

volumes:
  postgres_data:
    name: cses_postgres_data
