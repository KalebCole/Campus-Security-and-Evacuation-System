services:
  # API Service Configuration
  api:
    # Build the Dockerfile in the current directory
    build: .
    # Expose port 8080 to the host machine
    ports:
      - "8080:8080"
    # Environment variables for the API service
    environment:
      # Database connection string using service name 'postgres' as host
      - DATABASE_URL=postgresql://cses_admin:cses_password_123!@postgres:5432/cses_db
      # MQTT broker configuration
      - MQTT_BROKER_ADDRESS=mosquitto
      - MQTT_BROKER_PORT=1883
      # Face recognition service URL - Updated to point to deepface service
      - FACE_RECOGNITION_URL=http://deepface:5000
      # Application settings
      - DEBUG=true
      - SESSION_TIMEOUT=30
    # Add volume mount for development - Sync local code with container code
    volumes:
      # Mount current directory (.) on host to /app in container
      - .:/app
    # Dependencies and startup order
    depends_on:
      postgres:
        # Wait for postgres to be healthy before starting
        condition: service_healthy
      # Make API depend on deepface service
      deepface:             # <-- Changed from face_recognition
        condition: service_started # Or service_healthy if deepface provides one
      # Add dependency on the MQTT broker
      mosquitto:
        condition: service_started # Wait for broker to start
    # Network configuration
    networks:
      - cses_network

  # PostgreSQL Service Configuration
  postgres:
    # Use pgvector image which includes PostgreSQL 15 with vector extension
    image: ankane/pgvector:latest
    # Database credentials and configuration
    environment:
      POSTGRES_USER: cses_admin
      POSTGRES_PASSWORD: cses_password_123!
      POSTGRES_DB: cses_db
    # Expose PostgreSQL port to host
    ports:
      - "5432:5432"
    # Persistent storage configuration
    volumes:
      # Named volume for database data persistence
      - postgres_data:/var/lib/postgresql/data
      # Initialization script that runs on container startup
      - ../database:/docker-entrypoint-initdb.d
    # Health check configuration
    healthcheck:
      # Check if PostgreSQL is ready to accept connections
      test: ["CMD-SHELL", "pg_isready -U cses_admin -d cses_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Network configuration
    networks:
      - cses_network

  # DeepFace Service Configuration (Updated)
  deepface:
    image: serengil/deepface:latest # Using official image
    container_name: deepface_service # Added container name
    restart: unless-stopped         # Added restart policy
    ports:
      - "5001:5000" # Map host 5001 to container 5000 (DeepFace default API port)
    # Note: Configuring default model (GhostFaceNet) might require research.
    # DeepFace API endpoints usually accept model_name as a parameter.
    # environment: 
    #  - DEEPFACE_DEFAULT_MODEL=GhostFaceNet # Example - VERIFY if this works
    networks:
      - cses_network

  # # Face Recognition Service Configuration (Commented Out - Keep for reference?)
  # face_recognition:
  #   build:
  #     # Context is the face_recognition directory relative to this compose file
  #     context: ../face_recognition
  #     dockerfile: ./service/Dockerfile
  #   container_name: face_recognition_service
  #   ports:
  #     - "5001:5001" # Expose port 5001 to host
  #   # Mount necessary code directories (relative paths from this compose file)
  #   volumes:
  #     - ../face_recognition/core:/app/core
  #     - ../face_recognition/service:/app/service
  #     - ../face_recognition/config:/app/config
  #     - ../face_recognition/core/models:/app/core/models
  #   environment:
  #     - MODEL_PATH=/app/core/models/ghostfacenets.h5
  #     - PYTHONPATH=/app
  #   restart: unless-stopped
  #   networks:
  #     - cses_network # Add to the same network

  # MQTT Broker Service Configuration (Using definition from mqtt_broker)
  mosquitto:
    image: eclipse-mosquitto:latest # Using latest tag as per mqtt_broker definition
    container_name: mosquitto # Using name from mqtt_broker definition
    ports:
      - "1883:1883"  # MQTT port (No 9001 here, matching source)
    volumes:
      # Paths adjusted relative to api directory
      - ../mqtt_broker/config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ../mqtt_broker/data:/mosquitto/data
      - ../mqtt_broker/log:/mosquitto/log
    networks:
      - cses_network # Ensure it's on the correct network for the API
    restart: unless-stopped

# Volume definitions
volumes:
  # Named volume for PostgreSQL data persistence
  postgres_data:
    name: cses_postgres_data

# Network definitions
networks:
  # Custom network for service communication
  cses_network:
    name: cses_network 